image: registry.gitlab.com/jonashackt/aws-kubectl-tkn:0.21.0

.before_script_template:
  before_script:
    - mkdir ~/.kube
    - echo "$EKSKUBECONFIG" > ~/.kube/config
    - echo "--- Testdrive connection to cluster"
    - kubectl cluster-info
    - kubectl get nodes
    - echo "--- Test if Tekton pipelines are set up"
    - kubectl get pods --namespace tekton-pipelines
    - echo "--- Change permission for kubecfg"
    - chmod +x kubecfg

stages:
  - validate
  - deploy

# ============================================ MR Pipelines Start ============================================
# MR will be blocked if any pipeline failed/ no pipeline run

# 1. Check if any main file is changed
# Fail the pipeline if any main file is changed (user should not have rights to modify main files)
# Skip the pipeline if none of the main files is changed
#check-files-changed:
#  stage: validate
#  rules: 
#    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
#      changes:
#        - continuousd/*
#        - k8s/*
#        - tekton/*
#        - users/namespaces/nusfriends1/**/*
#        - sys/internal-docker-registry.jsonnet
#        - sys/internal-tekton.jsonnet
#        - sys/internal_namespaces.jsonnet
#        - sys/test_pipeline.jsonnet
#        - users/aiedsys/main.jsonnet
#        - kubecfg
#  script:
#  - echo "You do not have the rights to modify files outside of your namespace :("
#  - exit 1

# Check if any file in user namespace is changed
# Pass the pipeline if user only changed the files inside own's namespace
# Skip the pipeline if user does not change any file in own's namespace
validate-namespace:
  stage: validate
  variables:
    NAMESPACE_DIR: 'namespaces/$GITLAB_USER_LOGIN'
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - namespaces/$GITLAB_USER_LOGIN/**/*
  script:
    - echo "Files in $NAMESPACE_DIR changed"
  
# ============================================= MR Pipelines End =============================================

deploy-app:
  extends: .before_script_template
  stage: deploy
  rules:
    # Only run pipeline if the code is committed/ merged into the master branch 
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    # This will deploy into k8s cluster directly
    # - echo "--- Deploy nusfriends1 to k8s"
    # - ./kubecfg update nusfriends1.jsonnet

    # This will deploy into k8s cluster via Tekton Pipeline
    - echo "--- Deloy nusfriends to k8s via Tekton Pipeline"
    - ./kubecfg --ext-str "CI_COMMIT_SHA=$CI_COMMIT_SHA" update sys/internal-pipeline.jsonnet
    
    # Display logs from Tekton Pipeline
    - echo "--- Show Tekton PipelineRun logs"
    - kubectl logs -n aiedsys --selector=tekton.dev/pipelineRun=$CI_COMMIT_SHA -f --all-containers --max-log-requests=8 --pod-running-timeout=45s --previous=false --ignore-errors=true

    # Hardcoded show external api gateway subdomains
    - echo "--- Your App is Running on..."
    - kubectl get ingresses.networking.k8s.io -n aiedsys --output jsonpath='{range .items[0].spec.rules[*]}{.host}{"\n"}{end}'

    # Dashboard instructions
    - echo "--- Dashboard Details"
    - echo "Local dashboard URL @ http://localhost:8001/api/v1/namespaces/aiedsys/services/https:kubernetes-dashboard:/proxy/#/pod?namespace=aiedsys"
    - echo "Dashboard Q&A @ https://continuousd.atlassian.net/wiki/spaces/CONTINUOUS/pages/3735553/User+Guide+v0.0#Dashboard-for-your-deployment"
