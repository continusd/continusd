image: registry.gitlab.com/jonashackt/aws-kubectl-tkn:0.21.0

before_script:
  - mkdir ~/.kube
  - echo "$EKSKUBECONFIG" > ~/.kube/config
  - echo "--- Testdrive connection to cluster"
  - curl -o ~/kubecfg https://objects.githubusercontent.com/github-production-release-asset-2e65be/429002685/b27817be-b229-4132-9a59-7a7195d13b97?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20221003%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20221003T164351Z&X-Amz-Expires=300&X-Amz-Signature=33c825cd635f6c19c943e870c72eb5313cdac0002ebfb5370d380ecdbb9a040b&X-Amz-SignedHeaders=host&actor_id=32188551&key_id=0&repo_id=429002685&response-content-disposition=attachment%3B%20filename%3Dkubecfg_Linux_X64&response-content-type=application%2Foctet-stream
  - ./kubecfg update internal-tekton.jsonnet
  - kubectl cluster-info
  - kubectl get nodes
  - echo "--- Test if Tekton pipelines are set up"
  - kubectl get pods --namespace tekton-pipelines

stages:
  - tkn-build

build-image:
  stage: tkn-build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - echo "--- Create parameterized Tekton PipelineRun (using JSONNET)"
    # - kubecfg update test_pipeline.jsonnet

    - echo "--- Trigger PipelineRun in Tekton / K8s"
    # - PIPELINE_RUN_NAME=$(kubectl create -f pipelinerun.yml --output=jsonpath='{.metadata.name}')

    - echo "--- Show Tekton PipelineRun logs"
    # - tkn pipelinerun logs $PIPELINE_RUN_NAME --follow
    - kubectl logs --selector=tekton.dev/pipelineRun=test-run-run --all-containers -f --max-log-requests=8

    - echo "--- Check if Tekton PipelineRun Failed & exit GitLab Pipeline accordingly"
    # - kubectl get pipelineruns $PIPELINE_RUN_NAME --output=jsonpath='{.status.conditions[*].reason}' | grep Failed && exit 1 || exit 0
