{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "ContiNUSd Introduction",
  "steps": [
    {
      "title": "[3m] Tutorial Pre-Survey",
      "description": "# Pre-Tutorial Insights: Let's Understand Your Prior Background\n\n_Expected Time to Complete: 3 minutes_\n\nWelcome to ContiNUSd! Your interactive guide to the world of containerisation!\n\nBefore we begin our learning journey, we'd like to understand your prior understanding on Kubernetes and related concepts. This will help us understand your needs better and ensure you get the most out of it.\n\n\n> ### ðŸ‘‰ Please take a few moments to fill out our [pre-tutorial survey](https://docs.google.com/forms/d/e/1FAIpQLSd3EeW2R1wHrMzFH46t8eUA4KmLoFr37ycHUPbpujPClmbo2Q/viewform).\n\n\nOnce you're done, we're ready to embark on our journey!\n\nClick [_Next_](command:codetour.navigateToStep?2) whenever you're ready!"
    },
    {
      "title": "[3m] What is Kubernetes?",
      "description": "# What is Kubernetes?\n\n_Expected Time to Complete: 3 minutes_\n\n\n![Tutorial Banner](./images/Kubernetes-Scheduling.webp)\n\n\nYou might be wondering, what is Kubernetes? Let's break it down:\n\nKubernetes, often referred to as K8s, is like an open-source software system that helps us handle and organize multiple apps running on multiple computers all at once.\n\nThink of it like a giant supervisor for your apps. If an app crashes, Kubernetes knows and starts it up again. If we need more copies of an app because our website is suddenly popular, Kubernetes can do that too!\n\nIn other words, Kubernetes takes care of a lot of the tough work, so we can focus on building and running reliable systems.\n\nExcited to get started? Let's dive into the world of Kubernetes together!"
    },
    {
      "file": "infrastructure/users/usability/main.jsonnet",
      "description": "# Your First Deployment on Kubernetes\n\nIn this tutorial, we take a hands-on approach to learning Kubernetes. We'll start by deploying a classic application, an [NGINX web server](https://en.wikipedia.org/wiki/Nginx) -- as of May 2023, nginx powers 25.86% of web servers on the internet.\n\n---\n\n### Step 1:\n**Verify your environment**: To ensure everything is set up correctly, let's verify our Kubernetes installation. Enter the following command:\n\n>> kubectl version --short\n\nYou should see a Kubernetes version output (with server version >=1.26) if everything is working as expected.\n\n##### What are `kubecfg` and `kubectl`?\n[`kubectl`](https://github.com/kubernetes/kubectl) is the official Kubernetes command-line tool used to communicate with and control your Kubernetes cluster. You can deploy applications, inspect and manage cluster resources, and view logs.\n\n[`kubecfg`](https://github.com/kubecfg/kubecfg) is an open-source tool built on top of kubectl for managing Kubernetes resources as code. This means instead of manually setting up and tweaking your resources through a user interface or command line, you describe what you want in files, and kubecfg sets up everything for you based on these descriptions.\n\n---\n\n### Step 2\n**Navigate to the infrastructure directory**: Now, let's change our directory to where the `main.jsonnet` file is located. This file contains the configuration we'll use for our deployment.\n\n>> cd /workspaces/continusd/infrastructure/users/usability\n\n>> ls\n\nIn this directory, you'll notice a file named `main.jsonnet`. This is an example of *infrastructure-as-code*, a practice where we manage and provision our infrastructure through machine-readable definition files, rather than manually configuring hardware or systems. Some languages used to declare such infrastructure include `json`, `yaml`, `HCL` and `jsonnet`.\n\nWhy does this matter? Think about creating a report or a presentation. If you make a change you don't like, you can always revert to a previous version if you've saved your work. That's one of the benefits of infrastructure-as-code: it allows us to keep track of changes and reverse them if necessary, much like version control in software development.\n\nIn contrast, older practices involved manually updating resources with commands. These changes were not only harder to track but also prone to human error. Infrastructure-as-code is a significant step forward in making our technology infrastructure more reliable and manageable.\n\n---\n\n### Step 3\n**Deploy Nginx**: We will apply this deployment using `kubecfg`. The `kubecfg update` command allows us to turn our `main.jsonnet` file into a set of Kubernetes resources, and then deploys these resources onto our Kubernetes cluster.\n\nRun the following command:\n\n>> kubecfg update main.jsonnet\n\nIt takes a few minutes for Kubernetes to download the images and deploy them into the cluster. Let's see how we can check whether the deployment is successful next step! \n\n---\n\n### Step 4\n**Verify the Deployment**: In the previous command, `kubecfg update` created a new set of resources for us. Next, let's find out what resources have been created.\n\nFirst, let's check the [Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/) created with the following command:\n>> kubectl get deployments -o wide\n\nA Kubernetes Deployment is a configuration that describes how a set of copies (called \"replicas\") of your containerized application should be managed and updated. In other words, it's a blueprint for how your app should run on the cluster. Notice from the output (**READY 2/2**) indicating we have 2 Pods running.\n\nWhat are [Pods](https://kubernetes.io/docs/concepts/workloads/pods/)? Let's print them:\n\n>> kubectl get pods\n\nPods are the smallest deployable units of computing that you can create and manage in Kubernetes. A Pod is a group of one or more containers, with shared storage and network resources, and a specification for how to run the containers.\n\nFinally, we see that a kubernetes [Service](https://kubernetes.io/docs/concepts/services-networking/service/) has also been created:\n\n>> kubectl get services\n\nIn Kubernetes, a Service is a method for exposing a network application that is running as one or more Pods in your cluster.\n\nCheck that your Deployments are all ready and running before proceeding to the next step!\n\n---\n\n### Step 5\n**Set up Port Forwarding**: Now, we'll create a local port forwarding from the container to our local machine. Port forwarding allows us to access a resource (like a web app or database) running inside a Kubernetes cluster from our local machine, as if it was running locally.\n\n>> kubectl port-forward service/my-first-app-service 8080:8080\n\nYou'll see a prompt to launch the browser, go ahead and launch it. You should see your Nginx server running!\n\n---\n\n### Step 6\n**Tearing Down the Deployment**: Lastly, let's clean up by tearing down the deployment we just created.\n\n>> kubecfg delete main.jsonnet\n\nCongratulations! You have successfully created, managed, and torn down your first Kubernetes deployment. This is the beginning of your Kubernetes journey, where you'll learn to manage more complex deployments and handle advanced Kubernetes features.",
      "line": 1,
      "selection": {
        "start": {
          "line": 27,
          "character": 1
        },
        "end": {
          "line": 28,
          "character": 1
        }
      }
    },
    {
      "file": "infrastructure/users/usability/main.jsonnet",
      "description": "### Tutorial Exercise 1\n\nIt's your turn to try!\n\n#### Task 1: Image Swap\n\nYour task is to switch the application's **`image`** from the current `nginx` to `\"yeasy/simple-web\"`. The [`yeasy/simple-web` image](https://hub.docker.com/r/yeasy/simple-web/) is a small web server that will show you the IP addresses of the source and the destination.\n\n**To complete this task, please address the following questions:**\n\n- [2 marks] What steps did you take in the source code to change the image to `\"yeasy/simple-web\"`? (Hint: You might need to change a specific line in a file.)\n- [2 marks] How did you apply this change to the running application? (Hint: Think about the command you need to run to update the Kubernetes Deployment.)\n- [2 marks] How can you confirm that the image has been successfully changed and is running as expected? (Hint: There's a Kubernetes command that can list the running Pods and their images.)\n- [3 marks] Bonus: What is Infrastructure as Code (IaC), and why is it important in managing applications and infrastructure?\nHint: Think about the benefits of having your infrastructure defined in code, such as version control, consistency, and automation. Remember, there's no single right answer. We're interested in your understanding and interpretation of these concepts.\n\n#### Task Submission\n\nPlease submit your answers [here](https://forms.gle/L7FEFUBw8EAEN8TJ7).",
      "line": 6
    },
    {
      "title": "Tutorial Post-Survey",
      "description": "# Post-Tutorial Insights: How did you find this tutorial?\n_Expected Time to Complete: 3 minutes_\n\nðŸ‘‰ Please take a few moments to fill out our [post-tutorial survey](https://forms.gle/qiJdFzVK1eCgG2jH7).\n\n\nYour insights are instrumental in shaping our course for future students. By sharing your experience, you're directly contributing to the refinement and enhancement of our curriculum. This way, we can ensure the next generation of learners embarks on an even more engaging and enlightening journey.\n\n**Thank you for being an invaluable part of this continuous improvement process!**"
    }
  ]
}