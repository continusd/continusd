{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "ContiNUSd Introduction",
  "steps": [
    {
      "title": "Hello!",
      "description": "# Welcome to Kubernetes 101: A Journey into Container Orchestration!\n\n![Tutorial Banner](./images/Kubernetes-Scheduling.webp)\n\nHello and welcome! Whether you're an experienced developer or just starting your journey in the tech world, we're thrilled to guide you through the exciting world of Kubernetes, one of the most powerful container orchestration systems out there.\n\nThis course is designed to be highly approachable, breaking down complex concepts into digestible pieces and guiding you step by step through the core elements of Kubernetes.\n\nHere's what we're going to cover:\n\n1. **Introduction to Kubernetes**: We'll begin by demystifying what Kubernetes is and why it's a key tool in today's tech environment. We'll look at its benefits and why businesses of all sizes are adopting it.\n\n2. **Key Kubernetes Concepts**: Understanding Kubernetes is easier when you know the lingo. We'll go over fundamental terms like Pods, Nodes, Clusters, and more to give you a solid foundation.\n\n3. **Setting Up Your Environment**: We'll guide you through setting up your very own Kubernetes environment, whether it's locally on your machine using minikube or on cloud platforms such as Google's GKE, Amazon's EKS, or Microsoft's AKS.\n\n4. **Deploying Your First Application**: This is where the fun really begins! We'll containerize a simple application, deploy it onto our Kubernetes cluster, and expose it to the world.\n\n5. **Scaling and Updating Your Application**: Here, we'll explore how Kubernetes makes it easy to manage your application's scalability and perform seamless updates.\n\n6. **Exploring Advanced Features**: Finally, we'll give you a sneak peek into some of the advanced features of Kubernetes like ConfigMaps, Secrets, PersistentVolumes, and more.\n\nSo, if you're excited to get your hands dirty and unravel the workings of Kubernetes, this is the right place! We can't wait to start this journey with you.\n\nLet's dive in!"
    },
    {
      "file": "infrastructure/users/usability/main.jsonnet",
      "description": "# Deploying Your First Nginx Server on Kubernetes\n\nIn this section, we will dive into the practical aspects of Kubernetes. We'll start with a classic application, deploying an Nginx server. Let's break it down step by step:\n\n### Step 1:\n**Verify your environment**: To ensure everything is set up correctly, let's verify our Kubernetes installation. Enter the following command:\n\n\n>> kubectl version\n\nYou should see a Kubernetes version output if everything is working as expected.\n\n### Step 2\n**Navigate to the infrastructure directory**: Now, let's change our directory to where the `main.jsonnet` file is located. This file contains the configuration we'll use for our deployment.\n\n>> cd /workspaces/continusd/infrastructure/users/usability\n\n### Step 3\n**Deploy Nginx**: We will apply this deployment using `kubecfg`. The `kubecfg` tool helps us manage our Kubernetes configuration files.\n\n>> kubecfg update main.jsonnet\n\n### Step 4\n**Verify the Deployment**: Next, let's confirm that the deployment was successful.\n\n>> kubectl get all\n\nIf the Nginx deployment is listed, then you've successfully deployed your application.\n\n### Step 5\n**Set up Port Forwarding**: Now, we'll create a local port forwarding from the container to our local machine.\n\n>> kubectl port-forward service/my-nginx-app-service 8080:8080\n\nYou'll see a prompt to launch the browser, go ahead and launch it. You should see your Nginx server running!\n\n### Step 6\n**Tearing Down the Deployment**: Lastly, let's clean up by tearing down the deployment we just created.\n\n>> kubecfg delete main.jsonnet\n\nCongratulations! You have successfully created, managed, and torn down your first Kubernetes deployment. This is the beginning of your Kubernetes journey, where you'll learn to manage more complex deployments and handle advanced Kubernetes features.",
      "line": 1
    }
  ]
}